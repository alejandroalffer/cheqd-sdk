libvcx (0.10.0) unstable; urgency=medium

[ Hyperledger ]

## 0.10.0

* Added `vcx_credential_reject` function to explicitly reject Aries Credential Offer by sending a ProblemReport message.
* Added `vcx_delete_credential` function to delete Credential from the wallet.
* Supported Aries Question Answer Protocol:
    * added `vcx_connection_send_answer` which prepares and sends the answer on the received question.
* Partial support of Out-of-Band Aries protocol:
    * Sender - Added `vcx_connection_create_outofband` function which prepares Connection object containing Out-of-Band invitation.
               The parameter `handshake` specifies whether the Sender wants to establish a regular connection using connections handshake protocol or create a public channel.
               Next when you called `vcx_connection_connect` Connection state machine either goes by regular steps or transit to Accepted state when no handshake requested.

    * Received - Added `vcx_connection_create_with_outofband_invitation` function which accepts Out-of-Band invitation.
                 If invitation contains `handshake_protocols` connection goes regular flow else transits to Completed state.
    * HandshakeReuse - Added `vcx_connection_send_reuse` function to send HandshakeReuse message.
    * request~attach:
        * Sender - It can be set into Out-of-Band invitation but VCX Issuance and Presentation state machines are not compatible with that protocol.
        * Receiver - User should start attached process once Connection is established.
* Add a helper function to download a single message from the Agency by the given id `vcx_agency_download_message`.
* Changed the logic for updating the status of the messages on the Agency (for Aries protocol only):
    * vcx_*_update_state - still update messages state on agency internally.
    * vcx_*_update_state_with_message - caller has full control, passes messages, and is also responsible to update states in agency.
* Updated handling of `~thread` decorator for Aries messages to track and set `sender_order` and `received_orders` fields.
* Updated building of DIDDoc to set `id` field according to W3C RFC.
* Adopted Aries `Problem Report` message for `issue-credential` and `present-proof` protocols.
    Previous VCX versions send general `Problem Report` messages from `notification` message family in case an error occurred in Issuance and Presentation protocols.
    VCX 0.10.0 sets appropriate `issue-credential`/`present-proof` message family while sending `Problem Report` message.
* Put `institution_logo_url` into Aries Connection invitation as `profileUrl` field.
* Added separate function for Pool initialization.
    Now we can deffer connecting to the Pool Ledger during library initialization(to decrease the time taken) by omitting `genesis_path` field in the config JSON.
    Next, we can use `vcx_init_pool` function (for instance as a background task) to perform a connection to the Pool Ledger.
* Added helper function `vcx_fetch_public_entities` to fetch public entities from the ledger.
    This function performs two steps:
        1) Retrieves the list of all credentials stored in the opened wallet.
        2) Fetch and cache Schemas / Credential Definitions / Revocation Registry Definitions correspondent to received credentials from the connected Ledger.
    This helper function can be used, for instance as a background task, to refresh library cache.
* Updated VCX library to make payment plugin optional dependency. We can omit installation of payment plugin in case we are not going to use payments for our application.

* Bugfixes:
    * Connection handles in Aries state machines can't be serialized properly.
          Overview: Aries Issuance and Presentation state machines held `connection_handle` as property.
          But actual Connection object matching to handle will be destroyed once the library is unloaded.
          That will break Aries state machines.
          Change:  Updated Aries Issuance and Presentation state machines to embed required connection-related data.
          Consequences: Deserialization for Aries Issuance and Presentation state machines in the intermediate state is broken but will work for Started and Finished.
    * Added check that Credential Offer attributes fully match to Credential Definition. Partially filled credentials cannot be issued.
    * Updated signature of Java API functions to return null (Void type) value for functions that actually do not return any result.
      Consequences: the combination of `exceptionally/thenAccept` function to handle results may treat null as an error.
      Tip: Use `whenComplete` function to proper handling instead of combination `exceptionally/thenAccept`.
    * Fixed custom logger to generate only logs with a set level.
    * Corrected `vcx_download_agent_messages` function to set `msg_ref_id` field for downloaded messages.

## 0.9.4
* Significantly improved performance of the library by updating Object Cache to use concurrent map instead of the blocking variant.
* Updating user profile happens during provisioning and optionally during connecting.

## 0.9.3
* Bugfixes

## 0.9.2
* Bugfixes

## 0.9.0
* Bugfixes
* Tested and provided libvcx with libmysqlstorage

## 0.8.0
* Bugfixes
* Fixed compatibility between proprietary (`protocol_version`: `2.0`/`1.0`) and aries protocols (`protocol_version`: `3.0`).

## 0.7.0
* Removed `connection_handle` from functions to get protocol messages.
* Added ability to accept a duplicate connection by redirecting to the already existing one instead of forming a duplicate connection.
* Added a new function `vcx_disclosed_proof_decline_presentation_request` to explicitly reject a presentation request.
* Added a new function `vcx_connection_info` to get information about connection.
* Bugfixes

## 0.6.2
* Implemented Basic Message RFC (IS-1189)
* Updated library to support "names" parameter in Proof Request Revealed Attributes (IS-1381)
* others minor bugfixes

## 0.6.1
* Bugfixes

## 0.6.0
* LibVCX Aries support:
    * Implemented Trust Ping RFC (IS-1435).
        * added `vcx_connection_send_ping` function to send `Ping` message on remote connection.
        * handle inbound `Ping` message after connection is established (use `vcx_connection_update_state` or `vcx_connection_update_state_with_message`).
    * Implemented Discover Features RFC (IS-1155)
        * added `vcx_connection_send_discovery_features` function to send discovery features request on remote connection.
        * handle inbound `Query` and `Disclose` messages after connection is established (use `vcx_connection_update_state` or `vcx_connection_update_state_with_message`).
    * Implemented Service Decorator RFC (IS-1449)
    * Added new Vcx setting: `actors` which specifies the set of protocols application supports (is used for Discover Features protocol handling).

## 0.5.0
* LibVCX Aries support:
    * Now you can keep old code without doing any changes and use Aries protocols if you have not parsed any messages. If you need more information -- see the migration guide.
    * Implemented Connection RFC (IS-1180)
    * Implemented Credential Issuance RFC (IS-1393)
    * Implemented Credential Presentation RFC (IS-1394)
    * Integrated Connection Protocol into Dummy Cloud Agent (IS-1392)

## 0.4.2
* *EXPERIMENTAL*
  Extended provisioning config to accept optional `did_method` filed. This field should be used to create fully qualified DIDs.
  The format of identifiers used on CredentialIssuance and ProofPresentation will determine based on the type of remote DID.
* Bugfixes

## 0.4.1
* Supported endorsing of transactions in Libvcx.
    * `vcx_*_prepare_for_endorser` - functions for `schema` and `credentialdef` which build transaction and crete internal object in differed state.
    * `vcx_*_update_state` and `vcx_*_get_state` - functions to update/get state of `schema`/`credentialdef` internal object.
    * `vcx_endorse_transaction` - function to endorse a transaction.
* Supported sign/verify with payment address functionality in Libvcx.
    * `vcx_wallet_sign_with_address` - to sign a message with a payment address.
    * `vcx_wallet_verify_with_address` - to verify a signature with a payment address.
* Extended Libvcx initialization config to accept pool configuration.
* Bugfixes

* 0.4.0
* Added a set of new APIs around credentials and proofs that work with messages that should be exchanged without handling the transport of those messages.
This removes the dependency on an agency/cloud-agent and allows the user of the SDK to transport those messages themselves.
There are two types of functions:
    * `vcx_*_get_request_msg` - gets a message that can be sent to the specified connection.
    * `vcx_*_update_state_with_message` - checks for any state change from the given message and updates the state attribute.
* Added new *EXPEREMENTAL* functions to get requirements and price for a ledger request.
    * `vcx_get_request_price` - returns request minimal request price for performing an action in case the requester can do it.
* Updated Indy-SDK CI/CD pipelines to test, to build and to publish Android artifacts for Libvcx.
* Bugfixes:
    * Android Crash upon logging
    * others minor bugfixes

* 0.3.2
    * Bugfixes

* 0.3.1
    * Added new `*_update_state_with_message` functions for connections, proofs, cred defs.
    * Bugfixes

* 0.3.0
    * Added new functions to support work with `Transaction Author Agreement` concept.
        * `vcx_get_ledger_author_agreement` to retrieve author agreement and acceptance mechanisms set on the Ledger.
        * `vcx_set_active_txn_author_agreement_meta` to set some accepted agreement as active and to use it for transaction sending.
    * Updated Libvcx behavior to use *EXPERIMENTAL* `Cache API` for faster-getting schemas and credential definitions.
    * Bugfixes

* 0.2.4
    * Bugfixes

* 0.2.3
* Updated Vcx to support community A2A protocol.
Added `protocol_type` field to VCX provisioning config with indicates A2A message format will be used.
    * `1.0` means the current protocol.
    * `2.0` means community (IN PROGRESS) protocol which in the current state includes implementation of the following HIPEs:
        * Message Types - https://github.com/hyperledger/indy-hipe/tree/master/text/0021-message-types
        * Message Threading - https://github.com/hyperledger/indy-hipe/tree/master/text/0027-message-id-and-threading
        * Wire Message - https://github.com/hyperledger/indy-hipe/tree/master/text/0028-wire-message-format.
* Added function `vcx_get_current_error` to get additional information for last error occurred in Libvcx.
* Bugfixes

* 0.2.2
    * Bugfixes

* 0.2.1
    * Bugfixes

* 0.2.0
    * Initial release
