---
stages:
  - dockerbuild-pre
  - dockerbuild
  - build-pre
  - build
  - test
  - package
  - publish

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - cache/

variables:
  staticLibVersion: "20190607"
  rustVersion: "1.45.0"
  libsovtokenVersion: "1.0.5"
  libsovtokenVersionExtra: "15"
  indyBranch: 'rc' # RPM stream
  indySimpleVersion: "1.16.0" # RPM package name
  indyFullVersion: "1.16.0-170" # RPM directory
  indyFullDebVersion: "1.16.0~170" # DEB package name
  androidSovtokenArtifact: "libsovtoken_1.0.5-201912281255-e39929e_all.zip"
  iosSovtokenArtifact: "libsovtoken_1.0.5-201912281252-e39929e_all.zip"

## - Anchors - ##
.tags_micro:
  tags:
    - docker-machine
    - micro

.tags_large:
  tags:
    - docker-machine
    - large

.tags_compute_xlarge:
  tags:
    - docker-machine
    - compute-xlarge

.kaniko_large:
  extends: .kaniko_micro
  tags:
    - docker-machine
    - large

.kaniko_micro:
  extends: .tags_micro
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  variables:
    DOCKER_CONTEXT: "${CI_PROJECT_DIR}"
  script:
    - if [ "$CI_COMMIT_REF_SLUG" == 'main' ] || [ "$CI_COMMIT_REF_SLUG" == 'cheqd-tokens-vcx' ] || [ "$CI_COMMIT_REF_SLUG" == 'stable' ]; then KANIKO_ARGS="--destination $CI_REGISTRY_IMAGE/${DOCKER_IMAGE_NAME}:latest $KANIKO_ARGS"; fi
    - echo "${KANIKO_ARGS}"
    - |
      echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" \
      > /kaniko/.docker/config.json
    - |
      echo "-----BEGIN CERTIFICATE-----
      MIIFJTCCAw2gAwIBAgIUMI0Z8YSLeRq8pZks40O3Dq2m8TIwDQYJKoZIhvcNAQEL
      BQAwGjEYMBYGA1UEAxMPRXZlcm55bSBSb290IENBMB4XDTE3MTAxMTIwMTAxMFoX
      DTQ3MTAwNDIwMTAzOVowGjEYMBYGA1UEAxMPRXZlcm55bSBSb290IENBMIICIjAN
      BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA1kjmtmMfLJfsqUNaco44N3brW8Vu
      b02lAeEwbxc65mwfAG8kAjW7kYhI/fDXFOYXUvoa3Dg7bFeEatdIjHOahZssGM27
      HsQZ4PfRhPE6HtXFszmDwXWuEekVxoyueTqL7ExnNZ+BRTXvPfm5nw1E7L3o3xHF
      GSOtWFCyHfKd1LwMKzAVSjxlawEZnfk3WK3NxrC4UYMlQaDme7m3rCMfO+KBQk69
      bFXsgn6/EihVeQ8T1+T8gogofzh5b4Z7kS6e6GMqotbGFg4agejkRVsIglSpaQLk
      2Ztn/MP1dwgyvO4uvplB4sxZSC2FhhovlwPETmbKsnpj020+m0+YU4FPKwjroMiH
      tP//YqiNKsLxtjhffW7XFToyy0qQttW5RMWnyx4MXs9Hwcy29gY1izeGMSzz3zV5
      HG8JSJikuYbYiGJRVS0egovkVjja6lrVk0Q4Hm5pbw4l7LYCd6bkDLMsRaS1QnWs
      9iz6XEf5SpIu1FuqHmlhj1ABehUyGIg5oC6egML3q78yk0mCW523qMFa9Kjnk871
      mmXSCn3p/3DCrwWYfpcibxtVaKyJj6ISYIcl+Zu65Uzmhf+nj56x3gkNgEOva7JS
      Xge+FxPxsaXBGyeSH09nNIoNmh/UucuzpNY2UyCpJuqXHtR5jaACSdsqNxG8tcDg
      K9v98D/DFiShghECAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF
      MAMBAf8wHQYDVR0OBBYEFOrH4oUpB94gNDNqdGG92kdVZ3qkMB8GA1UdIwQYMBaA
      FOrH4oUpB94gNDNqdGG92kdVZ3qkMA0GCSqGSIb3DQEBCwUAA4ICAQCwjN3ggZ98
      BXT39fKkCX3FHb0++aFcIyMKWrcZIpYrl3GoZsNKZK4QNQ+uJOP8xmqgyrCoMfch
      VIGPQ0RDN/IzqCLhc/U3pDmk2hXa3xTxD3gpCQZ6Bz04KlcLfZd5jzbI741bVDyF
      a1n46bEyuqV4SsNJWI/FGokJCNcZH66njBQBaQAccZ7xB9vWU9yjIYtGQDDvSm6J
      SC2knrQri0vv4QLUSc1LS6AlWWSQxcCpcdO+OzIFGsf5bVmYN6J4R3COY5NyQ+yn
      pOSN2NOh5h3ZrYAxm3i4Il0orVLveVcTVDGeAgZUII4YLJi/01RHGqit3aCuApSh
      bzFTZ5FldFss+JX9iAhqpFDbHLgae0F3QmYEnGilt/PzO4j23QJo3FZKeruQLH7P
      L9aOgN6S2+Akbbm9YTc59yzU5TZMxANwTdaYFWFqk/8nKgZiBR1l8jnWTlWnm86A
      qVssH3DLKwiYrWSOHRzGuN5BmPXxxtKQJlwAXt0wJE3puUkaJSRo7CJQ3QNMoKDe
      OjzXc9WvkFIXr3Eui8UTiHB/WT7N4o8hmVN404akGfWE0YNwRVfWpjGdew6g0tZi
      lFnjUUk49av67um43JHcinT5NFPuleZzkjaL/D8ueOrjXQDy05rwVdgmw9pXog4B
      Tw6APXtEnjfD2H8HOpOX/7ef4gWK0O1Q7A==
      -----END CERTIFICATE-----" >> /kaniko/ssl/certs/ca-certificates.crt
    - |
      /kaniko/executor ${KANIKO_ARGS} --context ${DOCKER_CONTEXT} --dockerfile $CI_PROJECT_DIR/${DOCKERFILE_PATH} \
      --destination $CI_REGISTRY_IMAGE/${DOCKER_IMAGE_NAME}:${CI_COMMIT_REF_SLUG}



## - Jobs : dockerbuild-pre - ##

.dockerbuild-libindy:
  extends: .kaniko_large
  variables:
    KANIKO_ARGS: "--build-arg RUST_VER=${rustVersion} --build-arg LIBINDY_VER=${indyFullDebVersion} --build-arg LIBNULL_VER=${indyFullDebVersion} --build-arg LIBSOVTOKEN_VER=${libsovtokenVersion}"
  only:
    refs:
      - main@evernym/verity/vdr-tools
      - cheqd-tokens-vcx@evernym/verity/vdr-tools
      - /^docker-.*/
      - /^android-.*/

dockerbuild-libindy-ubuntu16:
  stage: dockerbuild-pre
  extends: .dockerbuild-libindy
  variables:
    DOCKERFILE_PATH: libindy/ci/ubuntu.dockerfile
    DOCKER_IMAGE_NAME: libindy-ubuntu16
  only:
    changes:
      - .gitlab-ci.yml
      - libindy/ci/ubuntu.dockerfile

dockerbuild-libindy-ubuntu18:
  stage: dockerbuild-pre
  extends: .dockerbuild-libindy
  variables:
    DOCKERFILE_PATH: libindy/ci/ubuntu18.dockerfile
    DOCKER_IMAGE_NAME: libindy-ubuntu18
  only:
    changes:
      - .gitlab-ci.yml
      - libindy/ci/ubuntu18.dockerfile

dockerbuild-libindy-android:
  stage: dockerbuild
  extends: .kaniko_large
  dependencies:
    - dockerbuild-libindy-ubuntu16
  variables:
    DOCKERFILE_PATH: libindy/ci/android.dockerfile
    DOCKER_IMAGE_NAME: libindy-android
    DOCKER_CONTEXT: "${CI_PROJECT_DIR}/libindy/ci/"
  only:
    refs:
      - main
      - cheqd-tokens-vcx
      - stable
      - /^docker-.*/
      - /^android-.*/
    changes:
      - .gitlab-ci.yml
      - libindy/ci/ubuntu.dockerfile
      - libindy/ci/android.dockerfile
  before_script:
    - sed -i "s|^FROM.*|FROM ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:${CI_COMMIT_REF_SLUG}|g" libindy/ci/android.dockerfile
    - grep '^FROM' libindy/ci/android.dockerfile


## - Jobs : Build - ##
.build-libindy:
  extends: .tags_compute_xlarge
  stage: build
  artifacts:
    expire_in: 1 week
    paths:
      - libindy/target/${BUILD_TYPE}/libindy.so
      - libnullpay/target/${BUILD_TYPE}/libnullpay.so
      - cli/target/${BUILD_TYPE}/indy-cli
  services:
    - name: registry.gitlab.com/evernym/containers/indy-pool:1.12.3_1.0.8
      alias: pool_network
    - name: ghcr.io/cheqd/cheqd-testnet:v0.1.15
      alias: cheqd_pool_network
  timeout: 3h
  before_script:
    # The only working solution for private submodules fetching via ssh:
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2075

    # install ssh-agent
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    # run ssh-agent
    - eval $(ssh-agent -s)

    # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add $CHEQD_GITHUB_SSH_PRIVATE_KEY

    # disable host key checking (NOTE: makes you susceptible to man-in-the-middle attacks)
    # WARNING: use only in docker container, if you use it with shell you will overwrite your user's ssh config
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

    # Fetch submodules
    - git submodule sync --recursive
    - git submodule update --init --recursive

  script:
    - export TEST_POOL_IP=$(getent ahostsv4 pool_network | grep STREAM | head -n 1 | awk '{ print $1 }')
#    - export CHEQD_TEST_POOL_IP=$(getent ahostsv4 cheqd_pool_network | grep STREAM | head -n 1 | awk '{ print $1 }')
#    - export CHEQD_TEST_POOL_IP="http://$CHEQD_TEST_POOL_IP:26657"
    # - libindy/ci/scripts/lint.sh
    # - cli/ci/scripts/lint.sh
    - libindy/ci/scripts/build.sh ${BUILD_TYPE}
#    - libindy/ci/scripts/test.sh ${BUILD_TYPE} ${TEST_POOL_IP}
    - libnullpay/ci/scripts/build.sh ${BUILD_TYPE}
#    - libnullpay/ci/scripts/test.sh ${BUILD_TYPE} ${TEST_POOL_IP}
    - cli/ci/scripts/build.sh ${BUILD_TYPE}
#    - cli/ci/scripts/test.sh ${BUILD_TYPE} ${TEST_POOL_IP}

.cheqd-submodules:
  before_script:
    # The only working solution for private submodules fetching via ssh:
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2075

    # install ssh-agent
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    # run ssh-agent
    - eval $(ssh-agent -s)

    # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - chmod 600 $CHEQD_GITHUB_SSH_PRIVATE_KEY || true
    - ssh-add $CHEQD_GITHUB_SSH_PRIVATE_KEY

    # disable host key checking (NOTE: makes you susceptible to man-in-the-middle attacks)
    # WARNING: use only in docker container, if you use it with shell you will overwrite your user's ssh config
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

    # Fetch submodules
    - git submodule sync --recursive
    - git submodule update --init --recursive

build-libindy-ubuntu16-from-branch:
  extends: .build-libindy
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:${CI_COMMIT_REF_SLUG}
  variables:
    BUILD_TYPE: 'debug'
  only:
    refs:
      - /^docker-.*/

build-libindy-ubuntu16-from-latest:
  extends: .build-libindy
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:latest
  variables:
    BUILD_TYPE: 'debug'
  except:
    refs:
      - /^docker-.*/
      - main@evernym/verity/vdr-tools
      - cheqd-tokens-vcx@evernym/verity/vdr-tools

build-libindy-ubuntu16-release:
  extends: .build-libindy
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:latest
  variables:
    BUILD_TYPE: 'release'
  only:
    refs:
      - main@evernym/verity/vdr-tools
      - cheqd-tokens-vcx@evernym/verity/vdr-tools

build-libindy-ubuntu18-from-branch:
  extends: .build-libindy
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu18:${CI_COMMIT_REF_SLUG}
  variables:
    BUILD_TYPE: 'debug'
  only:
    refs:
      - /^docker-.*/

build-libindy-ubuntu18-from-latest:
  extends: .build-libindy
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu18:latest
  variables:
    BUILD_TYPE: 'debug'
  except:
    refs:
      - /^docker-.*/
      - main@evernym/verity/vdr-tools
      - cheqd-tokens-vcx@evernym/verity/vdr-tools

build-libindy-ubuntu18-release:
  extends: .build-libindy
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu18:latest
  variables:
    BUILD_TYPE: 'release'
  only:
    refs:
      - main@evernym/verity/vdr-tools
      - cheqd-tokens-vcx@evernym/verity/vdr-tools

.build-libindytest-android:
  extends:
    - .cheqd-submodules
    - .tags_compute_xlarge
  stage: build  # TODO separate build step
  services:
    - name: registry.gitlab.com/evernym/containers/indy-pool:1.12.3_1.0.8
      alias: pool_network
  script:
    - export TEST_POOL_IP=$(getent ahostsv4 pool_network | grep STREAM | head -n 1 | awk '{ print $1 }')
#    - cd libindy && ./android.test.sh x86

build-libindytest-android-from-latest:
  extends:
    - .cheqd-submodules
    - .build-libindytest-android
  image: ${CI_REGISTRY_IMAGE}/libindy-android:latest
  except:
    refs:
      - /^docker-.*/
      - main
      - cheqd-tokens-vcx

build-libindytest-android-from-branch:
  extends:
    - .cheqd-submodules
    - .build-libindytest-android
  image: ${CI_REGISTRY_IMAGE}/libindy-android:${CI_COMMIT_REF_SLUG}
  only:
    refs:
      - /^docker-.*/
      - main
      - cheqd-tokens-vcx

.build-libindy-android:
  extends:
    - .cheqd-submodules
    - .tags_compute_xlarge
  stage: build
  image: ${CI_REGISTRY_IMAGE}/libindy-android:${CI_COMMIT_REF_SLUG}
  only:
    refs:
      - main
      - cheqd-tokens-vcx
      - /^android-.*/
  artifacts:
    expire_in: 1 week
    paths:
      - libindy/android_out/
  script:
    - cd libindy
    - ./android.build.sh -d ${LIBINDY_ANDROID_ARCH}
    - mkdir android_out/
    - cp ./libindy_android_${LIBINDY_ANDROID_ARCH}.zip ./android_out/

build-libindy-android-x86:
  extends: .build-libindy-android
  variables:
    LIBINDY_ANDROID_ARCH: "x86"

build-libindy-android-x86_64:
  extends: .build-libindy-android
  variables:
    LIBINDY_ANDROID_ARCH: "x86_64"

build-libindy-android-arm:
  extends: .build-libindy-android
  variables:
    LIBINDY_ANDROID_ARCH: "arm"

build-libindy-android-armv7:
  extends: .build-libindy-android
  variables:
    LIBINDY_ANDROID_ARCH: "armv7"

build-libindy-android-arm64:
  extends: .build-libindy-android
  variables:
    LIBINDY_ANDROID_ARCH: "arm64"

build-libindy-macos:
  extends: .cheqd-submodules
  stage: build
  tags:
    - macos
    - bigsur
    - xcode-12-4
  script:
    - which rustup-init || brew install rustup-init
    - echo | rustup-init --default-toolchain 1.50.0
    - source $HOME/.cargo/env
    - brew install libsodium
    - brew install openssl@1.1
    - brew install zeromq
    - rm -rf ~/.indy_client || true
    - cd libindy
    - ulimit -n 2048
    # run libindy test without default feature local_nodes_pool
    - LIBRARY_PATH=./ cargo build --no-default-features --features fatal_warnings,only_high_cases,base58_rust_base58,pair_amcl,revocation_tests
#    - LIBRARY_PATH=./ cargo test --no-run --no-default-features --features only_high_cases,base58_rust_base58,pair_amcl,revocation_tests
#    - LIBRARY_PATH=./ RUST_TEST_THREADS=1 cargo test --test did --no-default-features --features only_high_cases,base58_rust_base58,pair_amcl,revocation_tests

build-libindy-ios:
  extends: .cheqd-submodules
  stage: build
  tags:
    - macos
    - bigsur
  artifacts:
    expire_in: 1 week
    paths:
      - libindy/ios_out/
  script:
    - which rustup-init || brew install rustup-init
    - echo | rustup-init --default-toolchain 1.50.0
    - source $HOME/.cargo/env
    - cargo install cargo-lipo
    - rustup target add aarch64-apple-ios x86_64-apple-ios
    - brew install libsodium
    - brew install openssl@1.1
    - brew install zeromq
    - rm -rf ~/.indy_client || true
    - mkdir libindy/ios_out/
    - ci/ios-build.sh libindy aarch64-apple-ios
    - cp libindy/out_pod/libindy.tar.gz libindy/ios_out/libindy-aarch64-armv7.tar.gz
    - rm -rf libindy/out_pod/
    - ci/ios-build.sh libindy
    - cp libindy/out_pod/libindy.tar.gz libindy/ios_out/libindy.tar.gz


## - Jobs : Test - ##
.test-libindy-java-wrapper:
  extends:
    - .cheqd-submodules
    - .tags_micro
  stage: test
  services:
    - name: registry.gitlab.com/evernym/containers/indy-pool:1.9.2_1.0.2
      alias: pool_network
  script:
    - export TEST_POOL_IP=$(getent ahostsv4 pool_network | grep STREAM | head -n 1 | awk '{ print $1 }')
#    - cp libindy/target/${BUILD_TYPE}/libindy.so wrappers/java/lib
#    - cp libnullpay/target/${BUILD_TYPE}/libnullpay.so wrappers/java/lib
#    - wrappers/java/ci/test.sh ${TEST_POOL_IP}

test-libindy-java-wrapper-from-branch:
  extends: .test-libindy-java-wrapper
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:${CI_COMMIT_REF_SLUG}
  dependencies:
    - build-libindy-ubuntu16-from-branch
  variables:
    PACKAGE_TYPE: 'xenial'
    BUILD_TYPE: 'debug'
  only:
    refs:
      - /^docker-.*/

test-libindy-java-wrapper-from-latest:
  extends: .test-libindy-java-wrapper
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:latest
  dependencies:
    - build-libindy-ubuntu16-from-latest
  variables:
    PACKAGE_TYPE: 'xenial'
    BUILD_TYPE: 'debug'
  except:
    refs:
      - /^docker-.*/
      - main@evernym/verity/vdr-tools
      - cheqd-tokens-vcx@evernym/verity/vdr-tools
      - stable@evernym/verity/vdr-tools

test-libindy-java-wrapper-release:
  extends: .test-libindy-java-wrapper
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:latest
  dependencies:
    - build-libindy-ubuntu16-release
  variables:
    PACKAGE_TYPE: 'xenial'
    BUILD_TYPE: 'release'
  only:
    refs:
      - main@evernym/verity/vdr-tools
      - cheqd-tokens-vcx@evernym/verity/vdr-tools


## - Jobs : Package - ##
.package-libindy:
  extends: .tags_micro
  stage: package
  artifacts:
    expire_in: 1 week
    paths:
      - libindy/target/debian/*.deb
      - libnullpay/target/debian/*.deb
      - cli/target/debian/*.deb
  only:
    refs:
      - main@evernym/verity/vdr-tools
      - cheqd-tokens-vcx@evernym/verity/vdr-tools
  script:
    - libindy/ci/scripts/package.sh ${CI_PIPELINE_IID}
    - libnullpay/ci/scripts/package.sh ${CI_PIPELINE_IID}
    - cli/ci/scripts/package.sh ${CI_PIPELINE_IID}

package-libindy-ubuntu16:
  extends: .package-libindy
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu16:latest
  dependencies:
    - build-libindy-ubuntu16-release

package-libindy-ubuntu18:
  extends: .package-libindy
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu18:latest
  dependencies:
    - build-libindy-ubuntu18-release


# - Jobs : Publish - ##
publish-libindy-java-wrapper:
  stage: publish
  image: registry.gitlab.com/evernym/containers/vcx-java/vcx-java:latest
  extends: .tags_micro
  only:
    refs:
      - main@evernym/verity/vdr-tools
      - cheqd-tokens-vcx@evernym/verity/vdr-tools
  script:
    - cp ${CLOUDREPO_SETTINGS_XML} ./settings.xml
    - wrappers/java/ci/publish.sh ${CI_COMMIT_BRANCH} ${CI_PIPELINE_IID}

publish-libindy:
  extends: .tags_micro
  stage: publish
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu18:latest
  dependencies:
    - package-libindy-ubuntu16
    - package-libindy-ubuntu18
  only:
    refs:
      - main@evernym/verity/vdr-tools
      - cheqd-tokens-vcx@evernym/verity/vdr-tools
  script:
    - mkdir -p ${CI_PROJECT_DIR}/output
    - cp libindy/target/debian/*.deb ${CI_PROJECT_DIR}/output
    - cp libnullpay/target/debian/*.deb ${CI_PROJECT_DIR}/output
    - cp cli/target/debian/*.deb ${CI_PROJECT_DIR}/output
    - ls -al ${CI_PROJECT_DIR}/output/
    - export KRAKEN_CREDENTIALS=${KRK_USERNAME}:${KRK_PASSWORD}
    - vcx/ci/scripts/publish.sh "${KRAKEN_CREDENTIALS}" libindy*xenial*.deb https://kraken.corp.evernym.com/repo/agency_dev/upload
    - vcx/ci/scripts/publish.sh "${KRAKEN_CREDENTIALS}" libindy*bionic*.deb https://kraken.corp.evernym.com/repo/agency_dev/upload
    - vcx/ci/scripts/publish.sh "${KRAKEN_CREDENTIALS}" libnullpay*xenial*.deb https://kraken.corp.evernym.com/repo/agency_dev/upload
    - vcx/ci/scripts/publish.sh "${KRAKEN_CREDENTIALS}" libnullpay*bionic*.deb https://kraken.corp.evernym.com/repo/agency_dev/upload
    - vcx/ci/scripts/publish.sh "${KRAKEN_CREDENTIALS}" indy-cli*xenial*.deb https://kraken.corp.evernym.com/repo/agency_dev/upload
    - vcx/ci/scripts/publish.sh "${KRAKEN_CREDENTIALS}" indy-cli*bionic*.deb https://kraken.corp.evernym.com/repo/agency_dev/upload

publish-libindy-android:
  extends: .tags_micro
  stage: publish
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu18:latest
  dependencies:
    - build-libindy-android-x86
    - build-libindy-android-x86_64
    - build-libindy-android-arm
    - build-libindy-android-armv7
    - build-libindy-android-arm64
  only:
    refs:
      - main@evernym/verity/vdr-tools
      - cheqd-tokens-vcx@evernym/verity/vdr-tools
  script:
    - >
      find libindy/android_out/ -name "*.zip" -exec
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file {}
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/vdr-tools-android/1.95.0-${CI_PIPELINE_IID}/" \;

publish-libindy-ios:
  extends: .tags_micro
  stage: publish
  image: ${CI_REGISTRY_IMAGE}/libindy-ubuntu18:latest
  dependencies:
    - build-libindy-ios
  only:
    refs:
      - main@evernym/verity/vdr-tools
      - cheqd-tokens-vcx@evernym/verity/vdr-tools
  script:
    - >
      find libindy/ios_out/ -name "*.tar.gz" -exec
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file {}
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/vdr-tools-ios/1.95.0-${CI_PIPELINE_IID}/" \;
